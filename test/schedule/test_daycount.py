import datetime

from ...schedule.daycount import DayCountType, DayCount


# datetime.datetime(2023, 11, 30), datetime.datetime(2024, 1, 30)
# datetime.datetime(2023, 11, 30), datetime.datetime(2024, 2, 28)
# datetime.datetime(2023, 11, 30), datetime.datetime(2024, 2, 29)
# datetime.datetime(2023, 11, 30), datetime.datetime(2024, 3, 1)
#
# datetime.datetime(2023, 11, 30), datetime.datetime(2029, 1, 30)
# datetime.datetime(2023, 11, 30), datetime.datetime(2029, 2, 28)
# datetime.datetime(2023, 11, 30), datetime.datetime(2029, 2, 29)
# datetime.datetime(2023, 11, 30), datetime.datetime(2029, 3, 1)
#
# datetime.datetime(2023, 2, 28), datetime.datetime(2023, 3, 31)
# datetime.datetime(2023, 2, 28), datetime.datetime(2029, 3, 31)
# datetime.datetime(2023, 3, 1), datetime.datetime(2023, 3, 31)
# datetime.datetime(2023, 3, 1), datetime.datetime(2029, 3, 31)
#
# datetime.datetime(2024, 2, 28), datetime.datetime(2024, 3, 31)
# datetime.datetime(2024, 2, 28), datetime.datetime(2027, 3, 31)
# datetime.datetime(2024, 2, 29), datetime.datetime(2024, 3, 31)
# datetime.datetime(2024, 2, 29), datetime.datetime(2027, 3, 31)
# datetime.datetime(2024, 3, 1), datetime.datetime(2024, 3, 31)
# datetime.datetime(2024, 3, 1), datetime.datetime(2027, 3, 31)

def calc360(y1, m1, d1, y2, m2, d2):
    return 360 * (y2 - y1) + 30 * (m2 - m1) + (d2 - d1)


def test_one_one():
    data = [[2011, 12, 28, 2012, 2, 28],
            [2011, 12, 28, 2012, 2, 29],
            [2011, 12, 28, 2012, 3, 1],
            [2011, 12, 28, 2016, 2, 28],
            [2011, 12, 28, 2016, 2, 29],
            [2011, 12, 28, 2016, 3, 1],
            [2012, 2, 29, 2012, 3, 29],
            [2012, 2, 29, 2012, 3, 28],
            [2012, 3, 1, 2012, 3, 28]]

    dc = DayCount(DayCountType.ONE_ONE)
    for row in data:
        d1 = datetime.datetime(row[0], row[1], row[2])
        d2 = datetime.datetime(row[3], row[4], row[5])

        assert dc.year_fraction(d1, d2) == 1.0
        assert dc.days(d1, d2) == 1


def test_act_act_isda():
    data = [[2011, 12, 28, 2012, 2, 28, (4.0 / 365.0 + 58.0 / 366.0)],
            [2011, 12, 28, 2012, 2, 29, (4.0 / 365.0 + 59.0 / 366.0)],
            [2011, 12, 28, 2012, 3, 1, (4.0 / 365.0 + 60.0 / 366.0)],
            [2011, 12, 28, 2016, 2, 28, (4.0 / 365.0 + 58.0 / 366.0 + 4)],
            [2011, 12, 28, 2016, 2, 29, (4.0 / 365.0 + 59.0 / 366.0 + 4)],
            [2011, 12, 28, 2016, 3, 1, (4.0 / 365.0 + 60.0 / 366.0 + 4)],
            [2012, 2, 29, 2012, 3, 29, 29.0 / 366.0],
            [2012, 2, 29, 2012, 3, 28, 28.0 / 366.0],
            [2012, 3, 1, 2012, 3, 28, 27.0 / 366.0]
            ]

    dc = DayCount(DayCountType.ACT_ACT_ISDA)
    for row in data:
        d1 = datetime.datetime(row[0], row[1], row[2])
        d2 = datetime.datetime(row[3], row[4], row[5])
        assert dc.year_fraction(d1, d2) == row[6]

    data = [[2011, 12, 28, 2012, 2, 28, 62],
            [2011, 12, 28, 2012, 2, 29, 63],
            [2011, 12, 28, 2012, 3, 1, 64],
            [2011, 12, 28, 2016, 2, 28, 1523],
            [2011, 12, 28, 2016, 2, 29, 1524],
            [2011, 12, 28, 2016, 3, 1, 1525]]
    for row in data:
        d1 = datetime.datetime(row[0], row[1], row[2])
        d2 = datetime.datetime(row[3], row[4], row[5])
        assert dc.days(d1, d2) == row[6]


def test_act_act_afb():
    data = [[2011, 12, 28, 2012, 2, 28, (62.0 / 365.0)],
            [2011, 12, 28, 2012, 2, 29, (63.0 / 365.0)],
            [2011, 12, 28, 2012, 3, 1, (64.0 / 366.0)],
            [2011, 12, 28, 2016, 2, 28, (62.0 / 365.0) + 4],
            [2011, 12, 28, 2016, 2, 29, (63.0 / 365.0) + 4],
            [2011, 12, 28, 2016, 3, 1, (64.0 / 366.0) + 4],
            [2012, 2, 28, 2012, 3, 28, 29.0 / 366.0],
            [2012, 2, 29, 2012, 3, 28, 28.0 / 366.0],
            [2012, 3, 1, 2012, 3, 28, 27.0 / 365.0]]

    dc = DayCount(DayCountType.ACT_ACT_AFB)
    for row in data:
        d1 = datetime.datetime(row[0], row[1], row[2])
        d2 = datetime.datetime(row[3], row[4], row[5])
        assert dc.year_fraction(d1, d2) == row[6]

    data = [[2011, 12, 28, 2012, 2, 28, 62],
            [2011, 12, 28, 2012, 2, 29, 63],
            [2011, 12, 28, 2012, 3, 1, 64],
            [2011, 12, 28, 2016, 2, 28, 1523],
            [2011, 12, 28, 2016, 2, 29, 1524],
            [2011, 12, 28, 2016, 3, 1, 1525]]
    for row in data:
        d1 = datetime.datetime(row[0], row[1], row[2])
        d2 = datetime.datetime(row[3], row[4], row[5])
        assert dc.days(d1, d2) == row[6]


def test_act_act_year():
    data = [
        [2011, 12, 28, 2012, 2, 28, (62.0 / 366.0)],
        [2011, 12, 28, 2012, 2, 29, (63.0 / 366.0)],
        [2011, 12, 28, 2012, 3, 1, (64.0 / 366.0)],
        [2011, 12, 28, 2016, 2, 28, (62.0 / 366.0) + 4],
        [2011, 12, 28, 2016, 2, 29, (63.0 / 366.0) + 4],
        [2011, 12, 28, 2016, 3, 1, (64.0 / 366.0) + 4],
        [2012, 2, 28, 2012, 3, 28, 29.0 / 366.0],
        [2012, 2, 29, 2012, 3, 28, 28.0 / 365.0],
        [2012, 3, 1, 2012, 3, 28, 27.0 / 365.0],
        [2011, 2, 28, 2011, 3, 2, (2.0 / 365.0)],
        [2011, 3, 1, 2011, 3, 2, (1.0 / 366.0)],
        [2012, 2, 28, 2016, 3, 2, (3.0 / 366.0) + 4],
        [2012, 2, 29, 2016, 3, 2, (2.0 / 365.0) + 4]
    ]

    dc = DayCount(DayCountType.ACT_ACT_YEAR)
    for (i, row) in enumerate(data):
        d1 = datetime.datetime(row[0], row[1], row[2])
        d2 = datetime.datetime(row[3], row[4], row[5])
        assert dc.year_fraction(d1, d2) == row[6]

    data = [[2011, 12, 28, 2012, 2, 28, 62],
            [2011, 12, 28, 2012, 2, 29, 63],
            [2011, 12, 28, 2012, 3, 1, 64],
            [2011, 12, 28, 2016, 2, 28, 1523],
            [2011, 12, 28, 2016, 2, 29, 1524],
            [2011, 12, 28, 2016, 3, 1, 1525]]
    for row in data:
        d1 = datetime.datetime(row[0], row[1], row[2])
        d2 = datetime.datetime(row[3], row[4], row[5])
        assert dc.days(d1, d2) == row[6]


def test_act_365_actual():
    data = [[2011, 12, 28, 2012, 2, 28, (62.0 / 365.0)],
            [2011, 12, 28, 2012, 2, 29, (63.0 / 366.0)],
            [2011, 12, 28, 2012, 3, 1, (64.0 / 366.0)],
            [2011, 12, 28, 2016, 2, 28, ((62.0 + 366.0 + 365.0 + 365.0 + 365.0) / 366.0)],
            [2011, 12, 28, 2016, 2, 29, ((63.0 + 366.0 + 365.0 + 365.0 + 365.0) / 366.0)],
            [2011, 12, 28, 2016, 3, 1, ((64.0 + 366.0 + 365.0 + 365.0 + 365.0) / 366.0)],
            [2012, 2, 28, 2012, 3, 28, 29.0 / 366.0],
            [2012, 2, 29, 2012, 3, 28, 28.0 / 365.0],
            [2012, 3, 1, 2012, 3, 28, 27.0 / 365.0]]
    dc = DayCount(DayCountType.ACT_365_ACTUAL)
    for (i, row) in enumerate(data):
        d1 = datetime.datetime(row[0], row[1], row[2])
        d2 = datetime.datetime(row[3], row[4], row[5])
        assert dc.year_fraction(d1, d2) == row[6]

    data = [[2011, 12, 28, 2012, 2, 28, 62],
            [2011, 12, 28, 2012, 2, 29, 63],
            [2011, 12, 28, 2012, 3, 1, 64],
            [2011, 12, 28, 2016, 2, 28, 62 + 366 + 365 + 365 + 365],
            [2011, 12, 28, 2016, 2, 29, 63 + 366 + 365 + 365 + 365],
            [2011, 12, 28, 2016, 3, 1, 64 + 366 + 365 + 365 + 365],
            [2012, 2, 28, 2012, 3, 28, 29],
            [2012, 2, 29, 2012, 3, 28, 28],
            [2012, 3, 1, 2012, 3, 28, 27]]
    for row in data:
        d1 = datetime.datetime(row[0], row[1], row[2])
        d2 = datetime.datetime(row[3], row[4], row[5])
        assert dc.days(d1, d2) == row[6]


def test_act_360():
    data = [[2011, 12, 28, 2012, 2, 28, (62.0 / 360.0)],
            [2011, 12, 28, 2012, 2, 29, (63.0 / 360.0)],
            [2011, 12, 28, 2012, 3, 1, (64.0 / 360.0)],
            [2011, 12, 28, 2016, 2, 28, ((62.0 + 366.0 + 365.0 + 365.0 + 365.0) / 360.0)],
            [2011, 12, 28, 2016, 2, 29, ((63.0 + 366.0 + 365.0 + 365.0 + 365.0) / 360.0)],
            [2011, 12, 28, 2016, 3, 1, ((64.0 + 366.0 + 365.0 + 365.0 + 365.0) / 360.0)],
            [2012, 2, 28, 2012, 3, 28, 29.0 / 360.0],
            [2012, 2, 29, 2012, 3, 28, 28.0 / 360.0],
            [2012, 3, 1, 2012, 3, 28, 27.0 / 360.0]]
    dc = DayCount(DayCountType.ACT_360)
    for (i, row) in enumerate(data):
        d1 = datetime.datetime(row[0], row[1], row[2])
        d2 = datetime.datetime(row[3], row[4], row[5])
        assert dc.year_fraction(d1, d2) == row[6]

    data = [[2011, 12, 28, 2012, 2, 28, 62],
            [2011, 12, 28, 2012, 2, 29, 63],
            [2011, 12, 28, 2012, 3, 1, 64],
            [2011, 12, 28, 2016, 2, 28, 62 + 366 + 365 + 365 + 365],
            [2011, 12, 28, 2016, 2, 29, 63 + 366 + 365 + 365 + 365],
            [2011, 12, 28, 2016, 3, 1, 64 + 366 + 365 + 365 + 365]]
    for row in data:
        d1 = datetime.datetime(row[0], row[1], row[2])
        d2 = datetime.datetime(row[3], row[4], row[5])
        assert dc.days(d1, d2) == row[6]


def test_act_364():
    data = [[2011, 12, 28, 2012, 2, 28, (62.0 / 364.0)],
            [2011, 12, 28, 2012, 2, 29, (63.0 / 364.0)],
            [2011, 12, 28, 2012, 3, 1, (64.0 / 364.0)],
            [2011, 12, 28, 2016, 2, 28, ((62.0 + 366.0 + 365.0 + 365.0 + 365.0) / 364.0)],
            [2011, 12, 28, 2016, 2, 29, ((63.0 + 366.0 + 365.0 + 365.0 + 365.0) / 364.0)],
            [2011, 12, 28, 2016, 3, 1, ((64.0 + 366.0 + 365.0 + 365.0 + 365.0) / 364.0)],
            [2012, 2, 28, 2012, 3, 28, 29.0 / 364.0],
            [2012, 2, 29, 2012, 3, 28, 28.0 / 364.0],
            [2012, 3, 1, 2012, 3, 28, 27.0 / 364.0]]
    dc = DayCount(DayCountType.ACT_364)
    for (i, row) in enumerate(data):
        d1 = datetime.datetime(row[0], row[1], row[2])
        d2 = datetime.datetime(row[3], row[4], row[5])
        assert dc.year_fraction(d1, d2) == row[6]

    data = [[2011, 12, 28, 2012, 2, 28, 62],
            [2011, 12, 28, 2012, 2, 29, 63],
            [2011, 12, 28, 2012, 3, 1, 64],
            [2011, 12, 28, 2016, 2, 28, 62 + 366 + 365 + 365 + 365],
            [2011, 12, 28, 2016, 2, 29, 63 + 366 + 365 + 365 + 365],
            [2011, 12, 28, 2016, 3, 1, 64 + 366 + 365 + 365 + 365],
            [2012, 2, 28, 2012, 3, 28, 29],
            [2012, 2, 29, 2012, 3, 28, 28],
            [2012, 3, 1, 2012, 3, 28, 27]]
    for row in data:
        d1 = datetime.datetime(row[0], row[1], row[2])
        d2 = datetime.datetime(row[3], row[4], row[5])
        assert dc.days(d1, d2) == row[6]


def test_act_365f():
    data = [[2011, 12, 28, 2012, 2, 28, (62.0 / 365.0)],
            [2011, 12, 28, 2012, 2, 29, (63.0 / 365.0)],
            [2011, 12, 28, 2012, 3, 1, (64.0 / 365.0)],
            [2011, 12, 28, 2016, 2, 28, ((62.0 + 366.0 + 365.0 + 365.0 + 365.0) / 365.0)],
            [2011, 12, 28, 2016, 2, 29, ((63.0 + 366.0 + 365.0 + 365.0 + 365.0) / 365.0)],
            [2011, 12, 28, 2016, 3, 1, ((64.0 + 366.0 + 365.0 + 365.0 + 365.0) / 365.0)],
            [2012, 2, 28, 2012, 3, 28, 29.0 / 365.0],
            [2012, 2, 29, 2012, 3, 28, 28.0 / 365.0],
            [2012, 3, 1, 2012, 3, 28, 27.0 / 365.0]]
    dc = DayCount(DayCountType.ACT_365F)
    for (i, row) in enumerate(data):
        d1 = datetime.datetime(row[0], row[1], row[2])
        d2 = datetime.datetime(row[3], row[4], row[5])
        assert dc.year_fraction(d1, d2) == row[6]

    data = [[2011, 12, 28, 2012, 2, 28, 62],
            [2011, 12, 28, 2012, 2, 29, 63],
            [2011, 12, 28, 2012, 3, 1, 64],
            [2011, 12, 28, 2016, 2, 28, 62 + 366 + 365 + 365 + 365],
            [2011, 12, 28, 2016, 2, 29, 63 + 366 + 365 + 365 + 365],
            [2011, 12, 28, 2016, 3, 1, 64 + 366 + 365 + 365 + 365],
            [2012, 2, 28, 2012, 3, 28, 29],
            [2012, 2, 29, 2012, 3, 28, 28],
            [2012, 3, 1, 2012, 3, 28, 27]]
    for row in data:
        d1 = datetime.datetime(row[0], row[1], row[2])
        d2 = datetime.datetime(row[3], row[4], row[5])
        assert dc.days(d1, d2) == row[6]


def test_act_365_25():
    data = [[2011, 12, 28, 2012, 2, 28, (62.0 / 365.25)],
            [2011, 12, 28, 2012, 2, 29, (63.0 / 365.25)],
            [2011, 12, 28, 2012, 3, 1, (64.0 / 365.25)],
            [2011, 12, 28, 2016, 2, 28, ((62.0 + 366.0 + 365.0 + 365.0 + 365.0) / 365.25)],
            [2011, 12, 28, 2016, 2, 29, ((63.0 + 366.0 + 365.0 + 365.0 + 365.0) / 365.25)],
            [2011, 12, 28, 2016, 3, 1, ((64.0 + 366.0 + 365.0 + 365.0 + 365.0) / 365.25)],
            [2012, 2, 28, 2012, 3, 28, 29.0 / 365.25],
            [2012, 2, 29, 2012, 3, 28, 28.0 / 365.25],
            [2012, 3, 1, 2012, 3, 28, 27.0 / 365.25]]
    dc = DayCount(DayCountType.ACT_365_25)
    for (i, row) in enumerate(data):
        d1 = datetime.datetime(row[0], row[1], row[2])
        d2 = datetime.datetime(row[3], row[4], row[5])
        assert dc.year_fraction(d1, d2) == row[6]

    data = [[2011, 12, 28, 2012, 2, 28, 62],
            [2011, 12, 28, 2012, 2, 29, 63],
            [2011, 12, 28, 2012, 3, 1, 64],
            [2011, 12, 28, 2016, 2, 28, 62 + 366 + 365 + 365 + 365],
            [2011, 12, 28, 2016, 2, 29, 63 + 366 + 365 + 365 + 365],
            [2011, 12, 28, 2016, 3, 1, 64 + 366 + 365 + 365 + 365],
            [2012, 2, 28, 2012, 3, 28, 29],
            [2012, 2, 29, 2012, 3, 28, 28],
            [2012, 3, 1, 2012, 3, 28, 27]]
    for (i, row) in enumerate(data):
        d1 = datetime.datetime(row[0], row[1], row[2])
        d2 = datetime.datetime(row[3], row[4], row[5])
        assert dc.days(d1, d2) == row[6]


def test_nl_360():
    data = [[2011, 12, 28, 2012, 2, 28, (62.0 / 360.0)],
            [2011, 12, 28, 2012, 2, 29, (62.0 / 360.0)],
            [2011, 12, 28, 2012, 3, 1, (63.0 / 360.0)],
            [2011, 12, 28, 2016, 2, 28, ((62.0 + 365.0 + 365.0 + 365.0 + 365.0) / 360.0)],
            [2011, 12, 28, 2016, 2, 29, ((62.0 + 365.0 + 365.0 + 365.0 + 365.0) / 360.0)],
            [2011, 12, 28, 2016, 3, 1, ((63.0 + 365.0 + 365.0 + 365.0 + 365.0) / 360.0)],
            [2012, 2, 28, 2012, 3, 28, 28.0 / 360.0],
            [2012, 2, 29, 2012, 3, 28, 28.0 / 360.0],
            [2012, 3, 1, 2012, 3, 28, 27.0 / 360.0],
            [2011, 12, 1, 2012, 12, 1, 365.0 / 360.0]]
    dc = DayCount(DayCountType.NL_360)
    for (i, row) in enumerate(data):
        d1 = datetime.datetime(row[0], row[1], row[2])
        d2 = datetime.datetime(row[3], row[4], row[5])
        assert dc.year_fraction(d1, d2) == row[6]

    data = [[2011, 12, 28, 2012, 2, 28, 62],
            [2011, 12, 28, 2012, 2, 29, 62],
            [2011, 12, 28, 2012, 3, 1, 63],
            [2011, 12, 28, 2016, 2, 28, 62 + 365 + 365 + 365 + 365],
            [2011, 12, 28, 2016, 2, 29, 62 + 365 + 365 + 365 + 365],
            [2011, 12, 28, 2016, 3, 1, 63 + 365 + 365 + 365 + 365],
            [2012, 2, 28, 2012, 3, 28, 28],
            [2012, 2, 29, 2012, 3, 28, 28],
            [2012, 3, 1, 2012, 3, 28, 27],
            [2011, 12, 1, 2012, 12, 1, 365]]
    for (i, row) in enumerate(data):
        d1 = datetime.datetime(row[0], row[1], row[2])
        d2 = datetime.datetime(row[3], row[4], row[5])
        assert dc.days(d1, d2) == row[6]


def test_nl_365():
    data = [[2011, 12, 28, 2012, 2, 28, (62.0 / 365.0)],
            [2011, 12, 28, 2012, 2, 29, (62.0 / 365.0)],
            [2011, 12, 28, 2012, 3, 1, (63.0 / 365.0)],
            [2011, 12, 28, 2016, 2, 28, ((62.0 + 365.0 + 365.0 + 365.0 + 365.0) / 365.0)],
            [2011, 12, 28, 2016, 2, 29, ((62.0 + 365.0 + 365.0 + 365.0 + 365.0) / 365.0)],
            [2011, 12, 28, 2016, 3, 1, ((63.0 + 365.0 + 365.0 + 365.0 + 365.0) / 365.0)],
            [2012, 2, 28, 2012, 3, 28, 28.0 / 365.0],
            [2012, 2, 29, 2012, 3, 28, 28.0 / 365.0],
            [2012, 3, 1, 2012, 3, 28, 27.0 / 365.0],
            [2011, 12, 1, 2012, 12, 1, 365.0 / 365.0]]
    dc = DayCount(DayCountType.NL_365)
    for (i, row) in enumerate(data):
        d1 = datetime.datetime(row[0], row[1], row[2])
        d2 = datetime.datetime(row[3], row[4], row[5])
        assert dc.year_fraction(d1, d2) == row[6]

    data = [[2011, 12, 28, 2012, 2, 28, 62],
            [2011, 12, 28, 2012, 2, 29, 62],
            [2011, 12, 28, 2012, 3, 1, 63],
            [2011, 12, 28, 2016, 2, 28, 62 + 365 + 365 + 365 + 365],
            [2011, 12, 28, 2016, 2, 29, 62 + 365 + 365 + 365 + 365],
            [2011, 12, 28, 2016, 3, 1, 63 + 365 + 365 + 365 + 365],
            [2012, 2, 28, 2012, 3, 28, 28],
            [2012, 2, 29, 2012, 3, 28, 28],
            [2012, 3, 1, 2012, 3, 28, 27],
            [2011, 12, 1, 2012, 12, 1, 365]]
    for (i, row) in enumerate(data):
        d1 = datetime.datetime(row[0], row[1], row[2])
        d2 = datetime.datetime(row[3], row[4], row[5])
        assert dc.days(d1, d2) == row[6]


def test_thirty_360_isda():
    data = [[2011, 12, 28, 2012, 2, 28, calc360(2011, 12, 28, 2012, 2, 28)],
            [2011, 12, 28, 2012, 2, 29, calc360(2011, 12, 28, 2012, 2, 29)],
            [2011, 12, 28, 2012, 3, 1, calc360(2011, 12, 28, 2012, 3, 1)],
            [2011, 12, 28, 2016, 2, 28, calc360(2011, 12, 28, 2016, 2, 28)],
            [2011, 12, 28, 2016, 2, 29, calc360(2011, 12, 28, 2016, 2, 29)],
            [2011, 12, 28, 2016, 3, 1, calc360(2011, 12, 28, 2016, 3, 1)],

            [2012, 2, 28, 2012, 3, 28, calc360(2012, 2, 28, 2012, 3, 28)],
            [2012, 2, 29, 2012, 3, 28, calc360(2012, 2, 29, 2012, 3, 28)],
            [2011, 2, 28, 2012, 2, 28, calc360(2011, 2, 28, 2012, 2, 28)],
            [2011, 2, 28, 2012, 2, 29, calc360(2011, 2, 28, 2012, 2, 29)],
            [2012, 2, 29, 2016, 2, 29, calc360(2012, 2, 29, 2016, 2, 29)],

            [2012, 3, 1, 2012, 3, 28, calc360(2012, 3, 1, 2012, 3, 28)],
            [2012, 5, 30, 2013, 8, 29, calc360(2012, 5, 30, 2013, 8, 29)],
            [2012, 5, 29, 2013, 8, 30, calc360(2012, 5, 29, 2013, 8, 30)],
            [2012, 5, 30, 2013, 8, 30, calc360(2012, 5, 30, 2013, 8, 30)],
            [2012, 5, 29, 2013, 8, 31, calc360(2012, 5, 29, 2013, 8, 31)],
            [2012, 5, 30, 2013, 8, 31, calc360(2012, 5, 30, 2013, 8, 30)],
            [2012, 5, 31, 2013, 8, 30, calc360(2012, 5, 30, 2013, 8, 30)],
            [2012, 5, 31, 2013, 8, 31, calc360(2012, 5, 30, 2013, 8, 30)]
            ]
    dc = DayCount(DayCountType.THIRTY_360_ISDA)
    for (i, row) in enumerate(data):
        d1 = datetime.datetime(row[0], row[1], row[2])
        d2 = datetime.datetime(row[3], row[4], row[5])
        assert dc.days(d1, d2) == row[6]
        assert dc.year_fraction(d1, d2) == row[6] / 360.0


def test_thirty_360_psa():
    data = [[2011, 12, 28, 2012, 2, 28, calc360(2011, 12, 28, 2012, 2, 28)],
            [2011, 12, 28, 2012, 2, 29, calc360(2011, 12, 28, 2012, 2, 29)],
            [2011, 12, 28, 2012, 3, 1, calc360(2011, 12, 28, 2012, 3, 1)],
            [2011, 12, 28, 2016, 2, 28, calc360(2011, 12, 28, 2016, 2, 28)],
            [2011, 12, 28, 2016, 2, 29, calc360(2011, 12, 28, 2016, 2, 29)],
            [2011, 12, 28, 2016, 3, 1, calc360(2011, 12, 28, 2016, 3, 1)],

            [2012, 2, 28, 2012, 3, 28, calc360(2012, 2, 28, 2012, 3, 28)],
            [2012, 2, 29, 2012, 3, 28, calc360(2012, 2, 30, 2012, 3, 28)],
            [2011, 2, 28, 2012, 2, 28, calc360(2011, 2, 30, 2012, 2, 28)],
            [2011, 2, 28, 2012, 2, 29, calc360(2011, 2, 30, 2012, 2, 29)],
            [2012, 2, 29, 2016, 2, 29, calc360(2012, 2, 30, 2016, 2, 29)],

            [2012, 3, 1, 2012, 3, 28, calc360(2012, 3, 1, 2012, 3, 28)],
            [2012, 5, 30, 2013, 8, 29, calc360(2012, 5, 30, 2013, 8, 29)],
            [2012, 5, 29, 2013, 8, 30, calc360(2012, 5, 29, 2013, 8, 30)],
            [2012, 5, 30, 2013, 8, 30, calc360(2012, 5, 30, 2013, 8, 30)],
            [2012, 5, 29, 2013, 8, 31, calc360(2012, 5, 29, 2013, 8, 31)],
            [2012, 5, 30, 2013, 8, 31, calc360(2012, 5, 30, 2013, 8, 30)],
            [2012, 5, 31, 2013, 8, 30, calc360(2012, 5, 30, 2013, 8, 30)],
            [2012, 5, 31, 2013, 8, 31, calc360(2012, 5, 30, 2013, 8, 30)]]
    dc = DayCount(DayCountType.THIRTY_360_PSA)
    for (i, row) in enumerate(data):
        d1 = datetime.datetime(row[0], row[1], row[2])
        d2 = datetime.datetime(row[3], row[4], row[5])
        assert dc.days(d1, d2) == row[6]
        assert dc.year_fraction(d1, d2) == row[6] / 360.0


def test_thirty_e_360():
    data = [[2011, 12, 28, 2012, 2, 28, calc360(2011, 12, 28, 2012, 2, 28)],
            [2011, 12, 28, 2012, 2, 29, calc360(2011, 12, 28, 2012, 2, 29)],
            [2011, 12, 28, 2012, 3, 1, calc360(2011, 12, 28, 2012, 3, 1)],
            [2011, 12, 28, 2016, 2, 28, calc360(2011, 12, 28, 2016, 2, 28)],
            [2011, 12, 28, 2016, 2, 29, calc360(2011, 12, 28, 2016, 2, 29)],
            [2011, 12, 28, 2016, 3, 1, calc360(2011, 12, 28, 2016, 3, 1)],

            [2012, 2, 28, 2012, 3, 28, calc360(2012, 2, 28, 2012, 3, 28)],
            [2012, 2, 29, 2012, 3, 28, calc360(2012, 2, 29, 2012, 3, 28)],
            [2011, 2, 28, 2012, 2, 28, calc360(2011, 2, 28, 2012, 2, 28)],
            [2011, 2, 28, 2012, 2, 29, calc360(2011, 2, 28, 2012, 2, 29)],
            [2012, 2, 29, 2016, 2, 29, calc360(2012, 2, 29, 2016, 2, 29)],

            [2012, 3, 1, 2012, 3, 28, calc360(2012, 3, 1, 2012, 3, 28)],
            [2012, 5, 30, 2013, 8, 29, calc360(2012, 5, 30, 2013, 8, 29)],
            [2012, 5, 29, 2013, 8, 30, calc360(2012, 5, 29, 2013, 8, 30)],
            [2012, 5, 30, 2013, 8, 30, calc360(2012, 5, 30, 2013, 8, 30)],
            [2012, 5, 29, 2013, 8, 31, calc360(2012, 5, 29, 2013, 8, 30)],
            [2012, 5, 30, 2013, 8, 31, calc360(2012, 5, 30, 2013, 8, 30)],
            [2012, 5, 31, 2013, 8, 30, calc360(2012, 5, 30, 2013, 8, 30)],
            [2012, 5, 31, 2013, 8, 31, calc360(2012, 5, 30, 2013, 8, 30)]]
    dc = DayCount(DayCountType.THIRTY_E_360)
    for (i, row) in enumerate(data):
        d1 = datetime.datetime(row[0], row[1], row[2])
        d2 = datetime.datetime(row[3], row[4], row[5])
        assert dc.days(d1, d2) == row[6]
        assert dc.year_fraction(d1, d2) == row[6] / 360.0


def test_thirty_eplus_360():
    data = [[2011, 12, 28, 2012, 2, 28, calc360(2011, 12, 28, 2012, 2, 28)],
            [2011, 12, 28, 2012, 2, 29, calc360(2011, 12, 28, 2012, 2, 29)],
            [2011, 12, 28, 2012, 3, 1, calc360(2011, 12, 28, 2012, 3, 1)],
            [2011, 12, 28, 2016, 2, 28, calc360(2011, 12, 28, 2016, 2, 28)],
            [2011, 12, 28, 2016, 2, 29, calc360(2011, 12, 28, 2016, 2, 29)],
            [2011, 12, 28, 2016, 3, 1, calc360(2011, 12, 28, 2016, 3, 1)],

            [2012, 2, 28, 2012, 3, 28, calc360(2012, 2, 28, 2012, 3, 28)],
            [2012, 2, 29, 2012, 3, 28, calc360(2012, 2, 29, 2012, 3, 28)],
            [2012, 3, 1, 2012, 3, 28, calc360(2012, 3, 1, 2012, 3, 28)],
            [2011, 2, 28, 2012, 2, 28, calc360(2011, 2, 28, 2012, 2, 28)],
            [2011, 2, 28, 2012, 2, 29, calc360(2011, 2, 28, 2012, 2, 29)],
            [2012, 2, 29, 2016, 2, 29, calc360(2012, 2, 29, 2016, 2, 29)],

            [2012, 3, 1, 2012, 3, 28, calc360(2012, 3, 1, 2012, 3, 28)],
            [2012, 5, 30, 2013, 8, 29, calc360(2012, 5, 30, 2013, 8, 29)],
            [2012, 5, 29, 2013, 8, 30, calc360(2012, 5, 29, 2013, 8, 30)],
            [2012, 5, 30, 2013, 8, 30, calc360(2012, 5, 30, 2013, 8, 30)],
            [2012, 5, 29, 2013, 8, 31, calc360(2012, 5, 29, 2013, 9, 1)],
            [2012, 5, 30, 2013, 8, 31, calc360(2012, 5, 30, 2013, 9, 1)],
            [2012, 5, 31, 2013, 8, 30, calc360(2012, 5, 30, 2013, 8, 30)],
            [2012, 5, 31, 2013, 8, 31, calc360(2012, 5, 30, 2013, 9, 1)]]
    dc = DayCount(DayCountType.THIRTY_EPLUS_360)
    for (i, row) in enumerate(data):
        d1 = datetime.datetime(row[0], row[1], row[2])
        d2 = datetime.datetime(row[3], row[4], row[5])
        assert dc.days(d1, d2) == row[6]
        assert dc.year_fraction(d1, d2) == row[6] / 360.0


def test_thirty_e_365():
    data = [[2011, 12, 28, 2012, 2, 28, calc360(2011, 12, 28, 2012, 2, 28)],
            [2011, 12, 28, 2012, 2, 29, calc360(2011, 12, 28, 2012, 2, 30)],
            [2011, 12, 28, 2012, 3, 1, calc360(2011, 12, 28, 2012, 3, 1)],
            [2011, 12, 28, 2016, 2, 28, calc360(2011, 12, 28, 2016, 2, 28)],
            [2011, 12, 28, 2016, 2, 29, calc360(2011, 12, 28, 2016, 2, 30)],
            [2011, 12, 28, 2016, 3, 1, calc360(2011, 12, 28, 2016, 3, 1)],

            [2012, 2, 28, 2012, 3, 28, calc360(2012, 2, 28, 2012, 3, 28)],
            [2012, 2, 29, 2012, 3, 28, calc360(2012, 2, 30, 2012, 3, 28)],
            [2011, 2, 28, 2012, 2, 28, calc360(2011, 2, 30, 2012, 2, 28)],
            [2011, 2, 28, 2012, 2, 29, calc360(2011, 2, 30, 2012, 2, 30)],
            [2012, 2, 29, 2016, 2, 29, calc360(2012, 2, 30, 2016, 2, 30)],

            [2012, 3, 1, 2012, 3, 28, calc360(2012, 3, 1, 2012, 3, 28)],
            [2012, 5, 30, 2013, 8, 29, calc360(2012, 5, 30, 2013, 8, 29)],
            [2012, 5, 29, 2013, 8, 30, calc360(2012, 5, 29, 2013, 8, 30)],
            [2012, 5, 30, 2013, 8, 30, calc360(2012, 5, 30, 2013, 8, 30)],
            [2012, 5, 29, 2013, 8, 31, calc360(2012, 5, 29, 2013, 8, 30)],
            [2012, 5, 30, 2013, 8, 31, calc360(2012, 5, 30, 2013, 8, 30)],
            [2012, 5, 31, 2013, 8, 30, calc360(2012, 5, 30, 2013, 8, 30)],
            [2012, 5, 31, 2013, 8, 31, calc360(2012, 5, 30, 2013, 8, 30)]]
    dc = DayCount(DayCountType.THIRTY_E_365)
    for (i, row) in enumerate(data):
        d1 = datetime.datetime(row[0], row[1], row[2])
        d2 = datetime.datetime(row[3], row[4], row[5])
        assert dc.days(d1, d2) == row[6]
        assert dc.year_fraction(d1, d2) == row[6] / 365.0


if __name__ == '__main__':
    test_one_one()
    test_act_act_isda()
    test_act_act_afb()
    test_act_act_year()
    test_act_365_actual()
    test_act_360()

    test_act_364()
    test_act_365f()
    test_act_365_25()
    test_nl_360()
    test_nl_365()
    test_thirty_360_isda()
    test_thirty_360_psa()
    test_thirty_e_360()
    test_thirty_eplus_360()
    test_thirty_e_365()
